# .github/workflows/generate_epg.yml

name: Generate Custom EPG

on:
  workflow_dispatch: # Allows manual triggering from GitHub UI
  schedule:
    # Runs every 3 hours at the 40th minute (e.g., 00:40, 03:40, 06:40, etc.)
    # Note: GitHub Actions schedules are based on UTC time.
    - cron: '40 */3 * * *'

jobs:
  build:
    # The runner environment where the workflow steps will execute.
    runs-on: ubuntu-22.04 # Using a specific Ubuntu version for consistency

    # Permissions needed for the workflow. 'contents: write' is essential
    # for the action to be able to commit and push the generated file back to your repository.
    permissions:
      contents: write

    steps:
    - name: Checkout repository content
      # This action checks out your repository onto the runner, making your
      # 'epg_generator.py' script and 'requirements.txt' available.
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for git operations

    - name: Set up Python environment
      # This action sets up a Python environment on the runner.
      uses: actions/setup-python@v5
      with:
        # Specify the desired Python version. Being specific like '3.10'
        # is better for consistency than '3.x'.
        python-version: '3.10' # Recommended to be specific

    - name: Install Python dependencies
      # This step installs packages listed in your 'requirements.txt' file.
      # Your 'epg_generator.py' script depends on 'requests', so this is crucial.
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run EPG Generator Script
      # This command runs your 'epg_generator.py' script.
      # Since 'actions/checkout' sets the repository root as the working directory,
      # 'python epg_generator.py' will find and execute your script correctly.
      run: python epg_generator.py

    - name: Commit and push the generated 'custom_epg.xml' file
      # These Git commands run after your Python script has created 'custom_epg.xml'.
      # They will add the new file, commit it, and push it back to your GitHub repo.
      # This step will always attempt to commit and push, overwriting existing content.
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Explicitly add the generated file to the staging area.
        git add custom_epg.xml
        
        # Always commit and push, even if the file content is identical.
        # The --allow-empty flag ensures a commit is created even if no changes were staged.
        git commit -m "Automated EPG update for custom_epg.xml" --allow-empty
        git push
